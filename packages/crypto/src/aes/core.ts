/**
 * AES核心算法实现
 * 这个文件包含AES加密算法的核心实现
 */

// AES S-box
const SBOX = new Uint8Array([
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe,
  0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4,
  0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7,
  0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3,
  0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09,
  0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3,
  0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe,
  0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
  0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92,
  0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c,
  0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
  0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14,
  0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2,
  0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5,
  0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25,
  0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86,
  0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e,
  0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42,
  0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
])

// AES Inverse S-box
const INV_SBOX = new Uint8Array([
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81,
  0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e,
  0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23,
  0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66,
  0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72,
  0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65,
  0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46,
  0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
  0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca,
  0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91,
  0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
  0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8,
  0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f,
  0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2,
  0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8,
  0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93,
  0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb,
  0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6,
  0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
])

// 轮常量
const RCON = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

/**
 * AES核心算法类
 */
export class AESCore {
  private keySize: number
  private numRounds: number
  private keySchedule: Uint32Array

  /**
   * 创建AES核心算法实例
   * @param key 密钥
   */
  constructor(key: Uint8Array) {
    // 根据密钥长度确定轮数
    this.keySize = key.length

    if (this.keySize !== 16 && this.keySize !== 24 && this.keySize !== 32) {
      throw new Error(
        'AES密钥长度必须为16、24或32字节（对应AES-128、AES-192或AES-256）'
      )
    }

    this.numRounds = this.keySize / 4 + 6 // AES-128: 10轮, AES-192: 12轮, AES-256: 14轮

    // 生成轮密钥
    this.keySchedule = this.expandKey(key)
  }

  /**
   * 加密单个块（16字节）
   * @param block 明文块
   * @returns 密文块
   */
  encryptBlock(block: Uint8Array): Uint8Array {
    if (block.length !== 16) {
      throw new Error('AES块大小必须为16字节')
    }

    // 将块转换为状态数组（4x4矩阵）
    const state = new Uint8Array(16)
    for (let i = 0; i < 16; i++) {
      state[i] = block[i]
    }

    // 初始轮密钥加
    this.addRoundKey(state, 0)

    // 主轮
    for (let round = 1; round < this.numRounds; round++) {
      this.subBytes(state)
      this.shiftRows(state)
      this.mixColumns(state)
      this.addRoundKey(state, round)
    }

    // 最后一轮（没有列混合）
    this.subBytes(state)
    this.shiftRows(state)
    this.addRoundKey(state, this.numRounds)

    return state
  }

  /**
   * 解密单个块（16字节）
   * @param block 密文块
   * @returns 明文块
   */
  decryptBlock(block: Uint8Array): Uint8Array {
    if (block.length !== 16) {
      throw new Error('AES块大小必须为16字节')
    }

    // 将块转换为状态数组
    const state = new Uint8Array(16)
    for (let i = 0; i < 16; i++) {
      state[i] = block[i]
    }

    // 初始轮密钥加
    this.addRoundKey(state, this.numRounds)

    // 主轮
    for (let round = this.numRounds - 1; round > 0; round--) {
      this.invShiftRows(state)
      this.invSubBytes(state)
      this.addRoundKey(state, round)
      this.invMixColumns(state)
    }

    // 最后一轮（没有列混合）
    this.invShiftRows(state)
    this.invSubBytes(state)
    this.addRoundKey(state, 0)

    return state
  }

  /**
   * 密钥扩展
   * @param key 原始密钥
   * @returns 扩展后的轮密钥
   */
  private expandKey(key: Uint8Array): Uint32Array {
    const keyWords = this.keySize / 4
    const scheduleLength = 4 * (this.numRounds + 1)
    const keySchedule = new Uint32Array(scheduleLength)

    // 复制原始密钥
    for (let i = 0; i < keyWords; i++) {
      keySchedule[i] =
        (key[4 * i] << 24) |
        (key[4 * i + 1] << 16) |
        (key[4 * i + 2] << 8) |
        key[4 * i + 3]
    }

    // 扩展密钥
    for (let i = keyWords; i < scheduleLength; i++) {
      let temp = keySchedule[i - 1]

      if (i % keyWords === 0) {
        // 对每个密钥块的第一个字进行特殊处理
        // 循环左移一个字节
        temp = ((temp << 8) | (temp >>> 24)) & 0xffffffff

        // S-box替换
        temp =
          (SBOX[(temp >>> 24) & 0xff] << 24) |
          (SBOX[(temp >>> 16) & 0xff] << 16) |
          (SBOX[(temp >>> 8) & 0xff] << 8) |
          SBOX[temp & 0xff]

        // 轮常量异或
        temp ^= RCON[i / keyWords - 1] << 24
      } else if (keyWords > 6 && i % keyWords === 4) {
        // AES-256的额外S-box替换
        temp =
          (SBOX[(temp >>> 24) & 0xff] << 24) |
          (SBOX[(temp >>> 16) & 0xff] << 16) |
          (SBOX[(temp >>> 8) & 0xff] << 8) |
          SBOX[temp & 0xff]
      }

      keySchedule[i] = keySchedule[i - keyWords] ^ temp
    }

    return keySchedule
  }

  /**
   * 字节替换
   * @param state 状态数组
   */
  private subBytes(state: Uint8Array): void {
    for (let i = 0; i < 16; i++) {
      state[i] = SBOX[state[i]]
    }
  }

  /**
   * 逆字节替换
   * @param state 状态数组
   */
  private invSubBytes(state: Uint8Array): void {
    for (let i = 0; i < 16; i++) {
      state[i] = INV_SBOX[state[i]]
    }
  }

  /**
   * 行移位
   * @param state 状态数组
   */
  private shiftRows(state: Uint8Array): void {
    // 第一行不移位

    // 第二行左移1位
    const temp1 = state[1]
    state[1] = state[5]
    state[5] = state[9]
    state[9] = state[13]
    state[13] = temp1

    // 第三行左移2位
    const temp2 = state[2]
    const temp3 = state[6]
    state[2] = state[10]
    state[6] = state[14]
    state[10] = temp2
    state[14] = temp3

    // 第四行左移3位
    const temp4 = state[15]
    state[15] = state[11]
    state[11] = state[7]
    state[7] = state[3]
    state[3] = temp4
  }

  /**
   * 逆行移位
   * @param state 状态数组
   */
  private invShiftRows(state: Uint8Array): void {
    // 第一行不移位

    // 第二行右移1位
    const temp1 = state[13]
    state[13] = state[9]
    state[9] = state[5]
    state[5] = state[1]
    state[1] = temp1

    // 第三行右移2位
    const temp2 = state[2]
    const temp3 = state[6]
    state[2] = state[10]
    state[6] = state[14]
    state[10] = temp2
    state[14] = temp3

    // 第四行右移3位
    const temp4 = state[3]
    state[3] = state[7]
    state[7] = state[11]
    state[11] = state[15]
    state[15] = temp4
  }

  /**
   * 列混合
   * @param state 状态数组
   */
  private mixColumns(state: Uint8Array): void {
    for (let i = 0; i < 4; i++) {
      const s0 = state[i * 4]
      const s1 = state[i * 4 + 1]
      const s2 = state[i * 4 + 2]
      const s3 = state[i * 4 + 3]

      // 有限域乘法
      state[i * 4] = this.gmul(0x02, s0) ^ this.gmul(0x03, s1) ^ s2 ^ s3
      state[i * 4 + 1] = s0 ^ this.gmul(0x02, s1) ^ this.gmul(0x03, s2) ^ s3
      state[i * 4 + 2] = s0 ^ s1 ^ this.gmul(0x02, s2) ^ this.gmul(0x03, s3)
      state[i * 4 + 3] = this.gmul(0x03, s0) ^ s1 ^ s2 ^ this.gmul(0x02, s3)
    }
  }

  /**
   * 逆列混合
   * @param state 状态数组
   */
  private invMixColumns(state: Uint8Array): void {
    for (let i = 0; i < 4; i++) {
      const s0 = state[i * 4]
      const s1 = state[i * 4 + 1]
      const s2 = state[i * 4 + 2]
      const s3 = state[i * 4 + 3]

      state[i * 4] =
        this.gmul(0x0e, s0) ^
        this.gmul(0x0b, s1) ^
        this.gmul(0x0d, s2) ^
        this.gmul(0x09, s3)
      state[i * 4 + 1] =
        this.gmul(0x09, s0) ^
        this.gmul(0x0e, s1) ^
        this.gmul(0x0b, s2) ^
        this.gmul(0x0d, s3)
      state[i * 4 + 2] =
        this.gmul(0x0d, s0) ^
        this.gmul(0x09, s1) ^
        this.gmul(0x0e, s2) ^
        this.gmul(0x0b, s3)
      state[i * 4 + 3] =
        this.gmul(0x0b, s0) ^
        this.gmul(0x0d, s1) ^
        this.gmul(0x09, s2) ^
        this.gmul(0x0e, s3)
    }
  }

  /**
   * 轮密钥加
   * @param state 状态数组
   * @param round 轮数
   */
  private addRoundKey(state: Uint8Array, round: number): void {
    for (let i = 0; i < 4; i++) {
      const rk = this.keySchedule[round * 4 + i]
      state[i * 4] ^= (rk >>> 24) & 0xff
      state[i * 4 + 1] ^= (rk >>> 16) & 0xff
      state[i * 4 + 2] ^= (rk >>> 8) & 0xff
      state[i * 4 + 3] ^= rk & 0xff
    }
  }

  /**
   * GF(2^8)有限域乘法
   * @param a 乘数
   * @param b 被乘数
   * @returns 乘积
   */
  private gmul(a: number, b: number): number {
    let p = 0
    let hiBitSet

    for (let i = 0; i < 8; i++) {
      if ((b & 1) !== 0) {
        p ^= a
      }

      hiBitSet = (a & 0x80) !== 0
      a <<= 1

      if (hiBitSet) {
        a ^= 0x1b // AES多项式 x^8 + x^4 + x^3 + x + 1
      }

      b >>= 1
    }

    return p & 0xff
  }
}
