import{_ as s,c as i,o as a,a6 as n}from"./chunks/framework.CRTY9GVS.js";const e=JSON.parse('{"title":"队列 Queue","description":"","frontmatter":{},"headers":[],"relativePath":"lab/data-structure/queue.md","filePath":"lab/data-structure/queue.md","lastUpdated":1744265790000}'),l={name:"lab/data-structure/queue.md"},p=[n('<h1 id="队列-queue" tabindex="-1">队列 Queue <a class="header-anchor" href="#队列-queue" aria-label="Permalink to &quot;队列 Queue&quot;">​</a></h1><p>队列是一种线性的数据结构, 其命名源自现实生活中的排队, 先排到的人先完事.</p><p>js的数组本身可以完全用来表示队列.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> queue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 入队</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 出队</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><ul><li><p>异步任务处理：将任务放入队列中，由后台进程或工作线程异步地处理。这可以提高系统的响应性，避免任务阻塞主线程或请求处理流程。</p></li><li><p>消息中间件：在分布式系统中，消息队列可以作为消息中间件，用于解耦不同的服务或组件之间的通信。消息队列可以提供可靠的消息传递和异步通信机制。</p></li><li><p>事件驱动架构：通过发布-订阅模式，将事件发布到队列中，然后订阅者可以接收并处理这些事件。这可以实现松耦合的组件间通信，支持事件驱动的架构。</p></li><li><p>缓存和削峰填谷：队列可以作为缓冲区，用于平衡系统中的负载和流量。当系统处理能力不足时，可以将请求或任务放入队列中，然后按照处理能力逐渐处理。</p></li><li><p>消息通知和推送：将消息放入队列中，然后推送给订阅者或用户。这可以用于实现实时通知、即时聊天等功能。</p></li><li><p>数据传输和同步：队列可以用于数据传输和同步，特别是在分布式系统中。数据可以通过队列中转，以确保数据的可靠性和一致性。</p></li><li><p>任务调度和处理：将任务放入队列中，然后按照优先级或其他规则进行调度和处理。这可以帮助管理和优化任务的执行顺序和资源利用。</p></li></ul>',6)];const t=s(l,[["render",function(s,n,e,l,t,h){return a(),i("div",null,p)}]]);export{e as __pageData,t as default};
