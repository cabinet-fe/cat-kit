import{_ as a,c as t,o as e,a6 as r}from"./chunks/framework.CRTY9GVS.js";const l=JSON.parse('{"title":"栈 Stack","description":"","frontmatter":{},"headers":[],"relativePath":"lab/data-structure/stack.md","filePath":"lab/data-structure/stack.md","lastUpdated":1744265790000}'),i={name:"lab/data-structure/stack.md"},s=[r('<h1 id="栈-stack" tabindex="-1">栈 Stack <a class="header-anchor" href="#栈-stack" aria-label="Permalink to &quot;栈 Stack&quot;">​</a></h1><p>是一种常见的数据结构，它遵循一种称为“后进先出”（Last-In-First-Out，LIFO）的原则。在栈中，最后添加的元素首先被移除，而最先添加的元素最后被移除。</p><p>栈可以使用数组或链表来实现。数组实现的栈可以使用固定大小的数组，或者可以动态调整大小。链表实现的栈没有大小限制，并且可以方便地进行元素的插入和删除。</p><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><ul><li>函数调用：栈可用于跟踪函数调用的顺序和返回地址。</li><li>表达式求值：栈可以用于解析和求解表达式，如中缀表达式转后缀表达式，并计算后缀表达式的值。</li><li>撤销操作：栈可用于实现撤销/重做功能，将操作记录在栈中以便回退和恢复状态。</li><li>浏览器历史记录：浏览器可以使用栈来跟踪用户浏览历史记录，使用户能够返回到之前访问的页面。</li><li>深度优先搜索（DFS）：在图遍历中，栈可以用于实现深度优先搜索算法。</li></ul>',5)];const c=a(i,[["render",function(a,r,l,i,c,d){return e(),t("div",null,s)}]]);export{l as __pageData,c as default};
