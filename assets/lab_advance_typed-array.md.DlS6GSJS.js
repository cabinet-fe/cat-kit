import{_ as a,c as s,o as t,a6 as i}from"./chunks/framework.CRTY9GVS.js";const n=JSON.parse('{"title":"类型化数组","description":"","frontmatter":{},"headers":[],"relativePath":"lab/advance/typed-array.md","filePath":"lab/advance/typed-array.md","lastUpdated":1744265790000}'),e={name:"lab/advance/typed-array.md"},r=[i('<h1 id="类型化数组" tabindex="-1">类型化数组 <a class="header-anchor" href="#类型化数组" aria-label="Permalink to &quot;类型化数组&quot;">​</a></h1><p>由于以前前端对文件以及二进制数据操作很少, 因此大多数时候很难接触到对二进制数据的操作, 仅仅通过 input 标签进行文件的选择并上传至服务器, 其他 大部分时候包括获取文件的 md5 等操作都由具体的库实现. 但假设我们要实现音频和视频文件的编辑时, 我们应如何去操作文件呢? 这就引入了类型化数组.</p><p>类型化数组具备很多普通数组一样的操作方式, 但是类型化数组不能修改长度, 每个元素都只能是数值, 数值的大小取决于使用的是何种类型化数组.</p><p>类型化数组大概有如下种类:</p><table tabindex="0"><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">Int8Array</td><td style="text-align:center;">8 位有符号整数(补码)</td></tr><tr><td style="text-align:center;">Uint8Array</td><td style="text-align:center;">8 位无符号整数</td></tr><tr><td style="text-align:center;">Int16Array</td><td style="text-align:center;">16 位有符号整数(补码)</td></tr><tr><td style="text-align:center;">Uint16Array</td><td style="text-align:center;">16 位无符号整数</td></tr><tr><td style="text-align:center;">Int32Array</td><td style="text-align:center;">32 有无符号整数(补码)</td></tr><tr><td style="text-align:center;">Uint32Array</td><td style="text-align:center;">32 位无符号整数</td></tr><tr><td style="text-align:center;">Float64Array</td><td style="text-align:center;">64 位 IEEE 浮点数（16 位有效数字，例如 1.123...15）</td></tr><tr><td style="text-align:center;">BigInt64Array</td><td style="text-align:center;">64 位有符号整数（补码）</td></tr><tr><td style="text-align:center;">BigUint64Array</td><td style="text-align:center;">64 位无符号整数</td></tr></tbody></table><p>相信也能看出来了, 类型数组的命名方式和很多强类型语言的数值类型命名方式类似, 大多数情况下我们使用Uint8Array的情况更多, 因为其粒度更细, 限制最少, 作用最广.</p><h2 id="arraybuffer" tabindex="-1">ArrayBuffer <a class="header-anchor" href="#arraybuffer" aria-label="Permalink to &quot;ArrayBuffer&quot;">​</a></h2><p>ArrayBuffer是一个很抽象的描述, 你可以将他倾向表达为一块可以操作的内存区域, 只不过他本身无法直接操作而是通过类型化数组或则DataView去操作.</p><p>通俗点来讲: ArrayBuffer是画布, 类型化数组是画笔.</p><h2 id="dataview" tabindex="-1">DataView <a class="header-anchor" href="#dataview" aria-label="Permalink to &quot;DataView&quot;">​</a></h2><p>数据视图是一种更加底层的接口, 它最大的作用就是控制字节序(字节顺序指定一段连续字节的数据的放置方式).</p><h2 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h2><p>类型化数组通过new TypedArray(ArrayBuffer)的方式使用.</p><p>一个结合ArrayBuffer的示例:</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明一个12字节的数据缓冲区</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义一个类型化数组</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Uint8Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 和数组一样的赋值方式, 不过赋值的大小需要根据具体的类型来, Uint8Array的赋值范围是0-255</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tArray[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其他赋值方式</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等价于tArray[1] = 1, tArray[2] = 2, tArray[3] = 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',15)];const l=a(e,[["render",function(a,i,n,e,l,p){return t(),s("div",null,r)}]]);export{n as __pageData,l as default};
