import{_ as s,c as a,o as i,a6 as n}from"./chunks/framework.CRTY9GVS.js";const e=JSON.parse('{"title":"响应式布局","description":"","frontmatter":{},"headers":[],"relativePath":"lab/advance/response-layout.md","filePath":"lab/advance/response-layout.md","lastUpdated":1744265790000}'),l={name:"lab/advance/response-layout.md"},p=[n('<h1 id="响应式布局" tabindex="-1">响应式布局 <a class="header-anchor" href="#响应式布局" aria-label="Permalink to &quot;响应式布局&quot;">​</a></h1><p>现在最为人所知的响应式布局方案是通过css的@media指令实现的.</p><p>媒体查询有很大的缺陷, 就是他只能基于屏幕去响应, 而无法基于布局容器本身去实现.</p><h2 id="如何在容器中实现" tabindex="-1">如何在容器中实现 <a class="header-anchor" href="#如何在容器中实现" aria-label="Permalink to &quot;如何在容器中实现&quot;">​</a></h2><p>答案是通过js Web API实现.</p><p>浏览器中提供了一个构造函数ResizeObserver. 该api能够对指定的dom进行监听, 监听其size大小的变化, 一旦变化即可做出其他操作.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> observer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResizeObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // do sth</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="新的css特性" tabindex="-1">新的CSS特性 <a class="header-anchor" href="#新的css特性" aria-label="Permalink to &quot;新的CSS特性&quot;">​</a></h2><p>@container是一项新的css特性, 他可以实现和上述js中同样的效果, 并且功能更加清大, 效果更好, 实现起来更加方便, 缺点是兼容性相对较差.</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layout (width &lt; 400px) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 样式 */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  container-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: layout;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  container-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: inline-size;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',10)];const t=s(l,[["render",function(s,n,e,l,t,h){return i(),a("div",null,p)}]]);export{e as __pageData,t as default};
