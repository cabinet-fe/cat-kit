import{_ as a,c as i,o as s,a6 as e}from"./chunks/framework.CRTY9GVS.js";const n=JSON.parse('{"title":"开发者实用密码学","description":"","frontmatter":{},"headers":[],"relativePath":"shared/crypto/index.md","filePath":"shared/crypto/index.md","lastUpdated":1744265790000}'),l={name:"shared/crypto/index.md"},p=[e('<h1 id="开发者实用密码学" tabindex="-1">开发者实用密码学 <a class="header-anchor" href="#开发者实用密码学" aria-label="Permalink to &quot;开发者实用密码学&quot;">​</a></h1><p>软件开发人员在日常工作中会经常用到密码学，例如哈希（信息摘要），加密，数字签名。实现加密算法通常很复杂，各种数学概念，本文实用密码学旨在如何理解密码学中的部分概念和如何使用现有的库。</p><h2 id="密码学概念" tabindex="-1">密码学概念 <a class="header-anchor" href="#密码学概念" aria-label="Permalink to &quot;密码学概念&quot;">​</a></h2><h3 id="原文" tabindex="-1">原文 <a class="header-anchor" href="#原文" aria-label="Permalink to &quot;原文&quot;">​</a></h3><p>原文是指待加密的内容。原文本身不难以理解，但如何在加密库中将原文输入则需要细细道来。</p><p>在你对密码世界没有任何概念的时候，你通常都会认为原文就是一个普通的字符串，实际上加密都是针对二进制数据进行的，因此我们需要了解如何将原文转化成二进制数据。</p><p>通常你所使用的加密库都已自带将原文转化为二进制内容的方法, 下面是一个例子</p><h3 id="对称加密" tabindex="-1">对称加密 <a class="header-anchor" href="#对称加密" aria-label="Permalink to &quot;对称加密&quot;">​</a></h3><p>使用相同的密钥来加密和解密消息。</p><p>例如 AES， DES， ChaCha20。</p><p>伪代码:</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;key&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加密</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> encrypted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;原文&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, key)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解密</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> decrypted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> decrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encrypted, key) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原文</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="非对称加密" tabindex="-1">非对称加密 <a class="header-anchor" href="#非对称加密" aria-label="Permalink to &quot;非对称加密&quot;">​</a></h3><p>通常使用一对密钥来进行加解密。有两种情况：</p><ol><li>公钥加密私钥解密，就是用于一般的加密保证数据安全性。</li><li>私钥加密公钥解密，用于身份认证判断某个用户的真实性（签名）。</li></ol><p>RSA是一个常用的非对称加密算法。</p><h3 id="数字签名和消息认证" tabindex="-1">数字签名和消息认证 <a class="header-anchor" href="#数字签名和消息认证" aria-label="Permalink to &quot;数字签名和消息认证&quot;">​</a></h3><p>数字签名实际上就是用私钥进行加密（签名），公钥进行解密（验证）。</p><p>数字签名和在真实世界的签名一样，一但签名经由你的手发生，意味着以下几个信息：</p><ol><li>内容生效，通常不得再更改（不可否认）。</li><li>内容发生对象确定，也就是你本人（真实性）。</li><li>内容已经被你确定（完整性）。</li></ol><h3 id="随机数" tabindex="-1">随机数 <a class="header-anchor" href="#随机数" aria-label="Permalink to &quot;随机数&quot;">​</a></h3><p>如果没有随机数，每次加密时生成的密文都是一样的，加密时输入随机数会让每次加密的密文不一样增加安全性。</p><p>初始化向量(IV)就是一种随机数。</p><p>需要注意的是：所有的软件中的随机数都是伪随机数，因此伪随机数的随机性显得尤为重要。</p><p>随机数通常并不像密钥那样保密。</p><h3 id="初始化向量iv-initialization-vector" tabindex="-1">初始化向量IV(Initialization Vector) <a class="header-anchor" href="#初始化向量iv-initialization-vector" aria-label="Permalink to &quot;初始化向量IV(Initialization Vector)&quot;">​</a></h3><p>初始化向量通常用于<a href="#分组加密">分组加密</a>的第一个分组，因为大部分加密模式需要与前一个密文分组进行运算加密，而第一个分组没有前置密文，因此需要一个和分组长度相等的值来承担这个角色，所以这个值就被称为初始化向量。</p><p>IV应该是一个固定长度的随机数或者伪随机数，如果IV每次都一致，那么得到的密文每次都会一致，没有意义。</p><p>解密时的IV应该与加密时的IV保持相同，如果密文需要传输给接收方解密，那么iv也需要一起传输过去。</p><p>通常来说，iv如果不指定那么它将默认是一个16字节大小的0填充数值，这个0填充是二进制的0，等价为new Uint8Array(16)。</p><h3 id="混淆" tabindex="-1">混淆 <a class="header-anchor" href="#混淆" aria-label="Permalink to &quot;混淆&quot;">​</a></h3><p>混淆不只是密码学中的概念，它本质上是指使事物变得不可理解或者难以理解的一种方式。</p><p>混淆通常就是改变排列方式和置换原文。</p><p>比如现代前端代码都经由构建工具打包，生成的JS代码被压缩后通常都是难以阅读的，因为压缩就是原文置换的一种，因此你可以认为这种压缩过的代码就是混淆过的代码。</p><p>现代防盗（比如某些小说网站）大量地使用到了混淆，这也是你看某些dao ban小说会出现奇怪乱码的原因。</p><h3 id="长度" tabindex="-1">长度 <a class="header-anchor" href="#长度" aria-label="Permalink to &quot;长度&quot;">​</a></h3><p>经常会看到AES-128, SHA-256之类的数字，有以下几种指代：</p><ol><li>生成的密文长度</li><li>密钥的长度</li><li>加密区块的长度</li></ol><p>这些数字准确地来讲都是8的倍数，8的单位是bit，8bit就是一个字节的长度，像AES-128实际上就是指的生成128位也即16字节长度的密文，并且加密密钥也需要使用16字节长度的密钥，区块长度也为16字节，甚至原文数据也要是128的倍数（不满足的会进行填充）。</p><h3 id="分组加密" tabindex="-1">分组加密 <a class="header-anchor" href="#分组加密" aria-label="Permalink to &quot;分组加密&quot;">​</a></h3><p>常见的对称加密算法， AES, DES， 3DES都是分组加密算法，他们只能加密固定长度的明文数据。</p><p>分组加密将输入的数据划分为<strong>固定</strong>大小的数据块（称为分组），然后对每个分组进行独立的加密和解密操作。</p><p>分组加密伴随着两个概念：算法模式和填充</p><h3 id="分组加密——模式" tabindex="-1">分组加密——模式 <a class="header-anchor" href="#分组加密——模式" aria-label="Permalink to &quot;分组加密——模式&quot;">​</a></h3><p>模式指定算法按照什么样的过程和组合方式来加密数据。</p><p>常见的模式：</p><ol><li>ECB: 电子密码本模式（Electronic CodeBook）</li><li>CBC: 密码分组链接模式（Cipher Block Chaining）</li><li>CFB: 密文反馈模式（Cipher Feedback mode）</li><li>OFB: 输出反馈模式（Output Feedback mode）</li><li>CTR: 计数器模式（Counter mode）</li></ol><p>你不需要理解这些模式的内容和过程，因为你无需实现这些算法，但需要注意的是除了ECB模式外，其他的模式都可以提供一个初始化向量(IV: Initialization Vector)来增加生成的密文的安全性，ECB本质上对每个分组进行单独加密，每个分组不会产生相关性。因此ECB相对其他模式来讲是不安全的。</p><h3 id="分组加密——填充" tabindex="-1">分组加密——填充 <a class="header-anchor" href="#分组加密——填充" aria-label="Permalink to &quot;分组加密——填充&quot;">​</a></h3><p>在密码学中，填充（padding）是指在加密算法中对数据进行补位的过程。填充通常用于确保待加密的数据长度符合特定的加密算法要求。</p><p>我们不需要了解不同的填充方法，只要加解密时填充保证填充方式一致即可。</p>',51)];const t=a(l,[["render",function(a,e,n,l,t,r){return s(),i("div",null,p)}]]);export{n as __pageData,t as default};
